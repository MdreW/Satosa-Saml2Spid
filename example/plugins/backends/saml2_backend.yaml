module: satosa.backends.saml2.SAMLBackend
name: Saml2
config:
  idp_blacklist_file: !ENV SATOSA_IDP_BLACKLIST_FILE

  # make metadata downloadable from entityid url
  entityid_endpoint: true

  sp_config:
    key_file: !ENV SATOSA_SAML2_BACKEND_KEY_FILE  #./pki/backend.key
    cert_file: !ENV SATOSA_SAML2_BACKEND_CRT_FILE #./pki/backend.cert
    encryption_keypairs:
    - {'key_file': ./pki/backend.key, 'cert_file': ./pki/backend.cert}

    organization: {display_name: 'Unical Authentication Proxy', name: 'proxy.auth', url: 'https://proxy.auth.unical.it'}
    contact_person:
    - {contact_type: technical, email_address: "mailto:supporto.tecnico@unical.it", given_name: Technical}
    - {contact_type: support, email_address: "mailto:richieste.ict@unical.it", given_name: Support}

    metadata:
      #local: [/opt/pyff/md/]
      # using pyFF or other MDX server
      mdq:
        - url: "http://mdq.auth.unical.it/static/sha1"
          # cert: ukfederation-mdq.pem

    entityid: '<base_url>/<name>/metadata'
    accepted_time_diff: 300

    service:
      sp:
        ui_info:
          display_name:
            - lang: en
              text: "Unical Authentication Proxy"
          description:
            - lang: en
              text: "Unical Authentication Proxy"
          # information_url:
            # - lang: en
              # text: "http://sp.information.url/"
          privacy_statement_url:
            - lang: en
              text: "https://www.unical.it/portale/ateneo/privacy/"
          keywords:
            - lang: it
              text: ["Unical Authentication Proxy", "Service Provider IT"]
            - lang: en
              text: ["Unical Authentication Proxy", "Service Provider EN"]
          logo:
            text: "https://auth.unical.it/static/img/logo.svg"
            width: "100"
            height: "50"

        only_use_keys_in_metadata: true
        force_authn: true

        # sign dig and enc
        authn_requests_signed: true
        want_response_signed: true

        # this must be unsolicited because in production different workers do not share the same storage!
        allow_unsolicited: true

        # they works both with ppln-dev branch
        # sign_alg: 'SIG_RSA_SHA384'
        # digest_alg: 'DIGEST_SHA384'
        sign_alg: "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        digest_alg: "http://www.w3.org/2001/04/xmlenc#sha256"

        endpoints:
          assertion_consumer_service:
          - [<base_url>/<name>/acs/post, 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST']
          # single_logout_service:
          # - [<base_url>/<name>ls/post/, 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST']
          discovery_response:
          - [<base_url>/<name>/disco, 'urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol']

        name_id_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient'
        name_id_format_allow_create: false

  # disco_srv must be defined if there is more than one IdP in the metadata specified above
  # it uses pyFF
  # disco_srv: "https://ds.testunical.it/role/idp.ds"
  disco_srv: "https://ds.auth.unical.it/role/idp.ds"
